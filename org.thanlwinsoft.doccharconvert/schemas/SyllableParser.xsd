<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema targetNamespace="http://www.thanlwinsoft.org/schemas/SyllableParser" xmlns="http://www.thanlwinsoft.org/schemas/SyllableParser" xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified" xml:lang="en">
<xsd:annotation>
  <xsd:documentation xml:lang="en">
SyllableParser: A schema for defining a conversion between 
syllable structures in two different scripts.
Copyright 2005 www.thanlwinsoft.org. All rights reserved.
  </xsd:documentation>
</xsd:annotation>

<!-- Top level SyllableConverter element-->
<xsd:element name="syllableConverter" type="SyllableConverter"/>

<xsd:complexType name="SyllableConverter">
  <xsd:sequence>
    <xsd:element name="script" minOccurs="2" maxOccurs="2" type="Script"/>
    <xsd:element name="checks" type="Checks"/>
    <xsd:element name="repeat" minOccurs="0" type="Repeat"/>
    <xsd:element name="classes" type="Classes"/>
    <xsd:element name="mappingTable" type="MappingTable" maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="backtrack" type="xsd:boolean"/>
</xsd:complexType>

<!-- represents the information on the Syllable Structure in one script -->
<xsd:complexType name="Script">
  <xsd:sequence>
    <xsd:element name="name" type="xsd:string"/>
    <xsd:element name="cluster" minOccurs="0" type="Cluster"/>
  </xsd:sequence>
  <xsd:attribute name="side" type="side"/>
  <xsd:attribute name="ignoreCase" type="xsd:boolean"/>
  <xsd:attribute name="font" type="xsd:string" />
</xsd:complexType>

<!-- defines the cluster structure -->
<xsd:complexType name="Cluster">
  <xsd:sequence>
    <xsd:element name="component" type="Component" maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="id" type="xsd:NMTOKEN"/>
  <xsd:attribute name="side" type="side" use="optional"/>
</xsd:complexType>

<!-- Defines one component within a cluster -->
<xsd:complexType name="Component" mixed="true">
	<xsd:simpleContent>
		<xsd:extension base="xsd:string">
			  <xsd:attribute name="id" type="xsd:NMTOKEN" use="required"/>
  			<xsd:attribute name="min" type="xsd:nonNegativeInteger"  use="optional"/>
  			<xsd:attribute name="priority" type="xsd:positiveInteger" use="optional"/>
		</xsd:extension>
	</xsd:simpleContent>
</xsd:complexType>

<!-- Defines a particular value that a referenced Component may take -->
<xsd:complexType name="ComponentRef">
  <xsd:sequence>
    <xsd:element name="c" type="C" minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
  <!-- r must match a component id -->
  <xsd:attribute name="r" type="xsd:NMTOKEN" use="required"/>
</xsd:complexType>

<!-- An element to define special markers for representing repeat syllables 
     This may be used in scripts like Thai and Lao
     -->
<xsd:complexType name="Repeat">
  <xsd:sequence>
    <xsd:element name="marker" type="Marker" maxOccurs="1"/>
    <xsd:element name="separator" type="Separator" maxOccurs="1"/>
  </xsd:sequence>
</xsd:complexType>

<!-- A Marker which follows a syllable to indicate that it is duplicated. -->
<xsd:complexType name="Marker">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="side" type="side" use="required"/>
      <xsd:attribute name="hex" type="hex" use="optional"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>

<!-- The symbol used to separate 2 duplicate syllables in a script that does
     not use a duplicate marker. -->
<xsd:complexType name="Separator">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="side" type="side" use="required"/>
      <xsd:attribute name="hex" type="hex" use="optional"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>

<!-- A container element for all the classes -->
<xsd:complexType name="Classes">
  <xsd:sequence>
    <xsd:element name="class" type="Class" maxOccurs="unbounded"/>
  </xsd:sequence>
</xsd:complexType>

<!-- Defines a Class with a 1-to-1 mapping between a component
     on one side and a component on the other -->
<xsd:complexType name="Class">
  <xsd:sequence>
    <xsd:element name="component" type="ComponentRef" minOccurs="2" maxOccurs="2"/>
  </xsd:sequence>
  <xsd:attribute name="id" type="xsd:NMTOKEN"/>
</xsd:complexType>

<!-- C is used in Classes and Tables to represent the specific value
     that a Component may take in a specific context. -->
<!-- This ought to be tightened up either hex or class or an 
     element with inner content should be used not a mixture -->
<xsd:complexType name="C">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="hex" type="hex" use="optional"/>
      <!-- r must match a component id-->
      <xsd:attribute name="r" type="xsd:NMTOKEN" use="optional"/>
      <!-- class must match a class id -->
      <xsd:attribute name="class" type="xsd:NMTOKEN" use="optional"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>

<!-- MappingTable containing information to map between components
     on one side of the conversion and the other. -->
<xsd:complexType name="MappingTable">
  <xsd:sequence>
    <xsd:element name="columns" type="Columns" />
    <xsd:element name="maps" type="Maps" />
  </xsd:sequence>
  <xsd:attribute name="id" type="xsd:NMTOKEN" use="required"/>
  <xsd:attribute name="optional" type="xsd:boolean" use="optional"/>
  <xsd:attribute name="firstEntryWins" type="xsd:boolean" use="optional"/>
</xsd:complexType>

<!-- Columns provides a header for a MappingTable defining which components
     are included in the table -->
<xsd:complexType name="Columns">
  <xsd:sequence>
    <xsd:element name="component" type="ComponentRef" maxOccurs="unbounded"/>
  </xsd:sequence>
</xsd:complexType>

<!-- Maps contains all the actual mappings (rows) in the table -->
<xsd:complexType name="Maps">
  <xsd:sequence>
    <xsd:element name="m" type="Map" maxOccurs="unbounded"/>
  </xsd:sequence>
</xsd:complexType>

<!-- A specific mapping between Component values on one side
     and component values on the other side. It represents a row in the
     mapping table. -->
<xsd:complexType name="Map">
  <xsd:sequence>
    <xsd:element name="c" type="C" maxOccurs="unbounded"/>
  </xsd:sequence>
</xsd:complexType>

<!-- section to define additional classes to check Syllable conversions -->
<xsd:complexType name="Checks">
  <xsd:sequence>
    <xsd:element name="checker" type="Checker"  minOccurs="0"
                 maxOccurs="unbounded"/>
  </xsd:sequence>
</xsd:complexType>

<!-- Checker represents one SyllableChecker class and associated arguments -->
<xsd:complexType name="Checker">
  <xsd:sequence>
    <xsd:element name="arg" type="Argument" minOccurs="0"
                 maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="class" type="xsd:string"/>
</xsd:complexType>

<xsd:complexType name="Argument" mixed="true">
	<xsd:attribute name="type" type="type" use="optional"/>
</xsd:complexType>

<!-- side defines the legal values for the side attribute 
     used to distinguish the 2 sides of the mapping. -->
<xsd:simpleType name="side">
  <xsd:restriction base="xsd:NMTOKEN">
    <xsd:enumeration value="left"/>
    <xsd:enumeration value="right"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="type">
	<xsd:restriction base="xsd:NMTOKEN">
		<xsd:enumeration value="file"/>
		<xsd:enumeration value="int"/>
		<xsd:enumeration value="float"/>
		<xsd:enumeration value="double"/>
	</xsd:restriction>
</xsd:simpleType>

<!-- A type to represent one or more 16 bit hex codes 
     For the moment, it assumes all hex values will be
     in lower case. -->
<xsd:simpleType name="hex">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[0-9a-f]{4}( [0-9a-f]{4})*"/>
    </xsd:restriction>
</xsd:simpleType>

</xsd:schema>
