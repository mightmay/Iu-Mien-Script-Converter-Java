<project name="org.thanlwinsoft.doccharconvert.build" default="build" basedir=".">
	<!--sets the path of the properties file
	<path id="release.path.rel">
		<pathelement path="${basedir}/../doccharconvert"/>
	</path>
	<pathconvert refid="release.path.rel" targetos="unix" property="release.path"/> 
	<property name="buildDirectory" value="${release.path}"/>-->
	<property file="build.${osgi.os}.${osgi.arch}.properties"/>
	<property file="build.common.properties" />

<!--
	<path id="svnant.class.path">
			<fileset dir="../../org.tigris.subversion.svnant/lib">
				<include name="**/*.jar"/>
			</fileset>
	</path>
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" 
			classpathref="svnant.class.path" onerror="fail"/>

	<target name="checkout">
		<mkdir dir="${buildDirectory}/features"/>
		<mkdir dir="${buildDirectory}/plugins"/>
		<svn>
			<export srcUrl="${svnUrl}/${svnDocCharConvert}/org.apache.xmlbeans"
				destPath="${buildDirectory}/plugins/org.apache.xmlbeans"/>
			<export srcUrl="${svnUrl}/${svnDocCharConvert}/org.thanlwinsoft.doccharconvert"
				destPath="${buildDirectory}/plugins/org.thanlwinsoft.doccharconvert"/>
			<export srcUrl="${svnUrl}/${svnDocCharConvert}/org.thanlwinsoft.doccharconvert.converters.mien"
				destPath="${buildDirectory}/plugins/org.thanlwinsoft.doccharconvert.converters.mien"/>
			<export srcUrl="${svnUrl}/${svnDocCharConvert}/org.thanlwinsoft.doccharconvert.converters.myanmar"
				destPath="${buildDirectory}/plugins/org.thanlwinsoft.doccharconvert.converters.myanmar"/>
			<export srcUrl="${svnUrl}/${svnDocCharConvert}/org.thanlwinsoft.doccharconvert.teckit.win32.x86"
				destPath="${buildDirectory}/plugins/org.thanlwinsoft.doccharconvert.teckit.win32.x86"/>
			<export srcUrl="${svnUrl}/${svnDocCharConvert}/org.thanlwinsoft.doccharconvert.teckit.linux.x86"
				destPath="${buildDirectory}/plugins/org.thanlwinsoft.doccharconvert.teckit.linux.x86"/>
			<export srcUrl="${svnUrl}/${svnDocCharConvert}/org.thanlwinsoft.doccharconvert.teckit.linux.x86_64"
				destPath="${buildDirectory}/plugins/org.thanlwinsoft.doccharconvert.teckit.linux.x86_64"/>
			<export srcUrl="${svnUrl}/${svnDocCharConvert}/org.thanlwinsoft.doccharconvert.feature.core"
				destPath="${buildDirectory}/features/org.thanlwinsoft.doccharconvert.feature.core"/>
			<export srcUrl="${svnUrl}/${svnDocCharConvert}/org.thanlwinsoft.doccharconvert.feature.mien"
				destPath="${buildDirectory}/features/org.thanlwinsoft.doccharconvert.feature.mien"/>
			<export srcUrl="${svnUrl}/${svnDocCharConvert}/org.thanlwinsoft.doccharconvert.feature.myanmar"
				destPath="${buildDirectory}/features/org.thanlwinsoft.doccharconvert.feature.myanmar"/>
			<export srcUrl="${svnUrl}/${svnDocCharConvert}/org.thanlwinsoft.doccharconvert.update/headless-build/maps"
							destPath="${buildDirectory}/maps"/>
			
		</svn>
	</target>
-->
	<pathconvert targetos="unix" property="hg.repository">
		<path location="${buildDirectory}/../"/>
	</pathconvert>
	<target name="checkout">
		<mkdir dir="${buildDirectory}"/>
		<exec executable="hg" dir="${buildDirectory}">
			<arg value="clone"/>
			<arg value="${hg.repository}"/>
			<arg value="${buildBase}-${doccharconvert.version}"/>
		</exec>
	</target>

	<target name="src-tar">
		<tstamp/>
		<tar compression="bzip2" destfile="${buildDirectory}/${buildBase}-${DSTAMP}${TSTAMP}.tar.bz2" longfile="gnu">
			<tarfileset dir="${buildDirectory}/${buildBase}-${doccharconvert.version}">
				<include name="**/*"/>
				<exclude name=".hg"/>
				<exclude name=".hg/**/*"/>
				<exclude name="org.apache.xmlbeans/**/*"/>
			</tarfileset>
		</tar>
		<!--
		<tar compression="bzip2" destfile="${buildDirectory}/${buildBase}-${DSTAMP}${TSTAMP}.tar.bz2">
			<tarfileset dir="${buildDirectory}/..">
				<include name="${buildBase}/plugins/**/*"/>
				<include name="${buildBase}/features/**/*"/>
			</tarfileset>
		</tar>
		-->
	</target>
	
	<target name="split-plugins-features">
		<move todir="${buildDirectory}/features">
		    <fileset dir="${buildDirectory}/${buildBase}-${doccharconvert.version}">
		    	<include name="org.thanlwinsoft.doccharconvert.feature*/**/*"/>		    	
			</fileset>
		</move>
		<move todir="${buildDirectory}/plugins">
		    <fileset dir="${buildDirectory}/${buildBase}-${doccharconvert.version}">
		    	<include name="org.thanlwinsoft.doccharconvert*/**/*"/>
		    	<include name="org.apache.xmlbeans/**/*"/>
			</fileset>
		</move>
	</target>
	
	<target name="dcc-schemas" depends="clean,checkout,src-tar,split-plugins-features">
		<ant antfile="${buildDirectory}/plugins/org.thanlwinsoft.doccharconvert/build-schemas.xml"
				dir="${buildDirectory}/plugins/org.thanlwinsoft.doccharconvert">
		</ant>
	</target>
	<!--
		This target actually executes the PDE Build process by launching the 
		Eclipse antRunner application.
	-->
	<target name="pde-build">
		<concat destfile="${basedir}/build.properties" force="yes">
		    <filelist dir="${basedir}"
		         files="build.features.properties,build.common.properties,build.${osgi.os}.${osgi.arch}.properties"/>
		</concat>
		<echo message="Build Directory: ${buildDirectory}"/>
		<echo message="${baseLocation}/plugins/org.eclipse.equinox.launcher.${osgi.os}.${osgi.ws}.${osgi.arch}_${equinoxLauncherPluginVersion}"/>
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${eclipse.pdebuild.scripts}build.xml" />
			<arg value="-Dtimestamp=${timestamp}" />
			<classpath>
				<pathelement location="${baseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
				<fileset dir="${buildDirectory}/plugins/org.apache.xmlbeans/lib">
				     <include name="*.jar"/>
				</fileset>
			</classpath>
		</java>
		<copy file="${basedir}/../site.xml" todir="${buildDirectory}/repository"/>
		<copy file="${basedir}/../index.html" todir="${buildDirectory}/repository"/>
		<copy todir="${buildDirectory}/repository/web">
			 <fileset dir="${basedir}/../web"/>
		</copy>
	</target>

	<target name="pde-product">
		<concat destfile="${basedir}/build.properties" force="yes">
		    <filelist dir="${basedir}"
		         files="build.product.properties,build.common.properties,build.${osgi.os}.${osgi.arch}.properties"/>
		</concat>
		<echo message="${baseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar"/>
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${eclipse.pdebuild.scripts}productBuild/productBuild.xml" />
			<arg value="-Dtimestamp=${timestamp}" />
			<classpath>
				<pathelement location="${baseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
			</classpath>
		</java>
	</target>
	
	<target name="add-executables">
		<!-- Not sure why PDE doesn't add these itself, but this hack solves the problem -->
		<zip destfile="${buildDirectory}/I.DocCharConvert/DocCharConvert-win32.win32.x86.zip" update="true">
			<zipfileset prefix="eclipse" dir="${baseLocation}/features/org.eclipse.equinox.executable_${equinoxExecutableVersion}/bin/win32/win32/x86">
			    <include name="*"/>
			</zipfileset>
		</zip>
        <zip destfile="${buildDirectory}/I.DocCharConvert/DocCharConvert-linux.gtk.x86.zip" update="true">
            <zipfileset prefix="eclipse" dir="${baseLocation}/features/org.eclipse.equinox.executable_${equinoxExecutableVersion}/bin/gtk/linux/x86">
                <include name="*"/>
            </zipfileset>
        </zip>
        <zip destfile="${buildDirectory}/I.DocCharConvert/DocCharConvert-linux.gtk.x86_64.zip" update="true">
            <zipfileset prefix="eclipse" dir="${baseLocation}/features/org.eclipse.equinox.executable_${equinoxExecutableVersion}/bin/gtk/linux/x86_64">
                <include name="*"/>
            </zipfileset>
        </zip>
		<!-- For Windows -->
        <unzip src="${buildDirectory}/I.DocCharConvert/DocCharConvert-win32.win32.x86.zip" dest="${buildDirectory}/DocCharConvert"/>
		<unzip src="${buildDirectory}/I.ThanLwinSoft.org/org.thanlwinsoft.doccharconvert.feature.myanmar-ThanLwinSoft.org-win32.win32.x86.zip" dest="${buildDirectory}/DocCharConvert"/>
		<unzip src="${buildDirectory}/I.ThanLwinSoft.org/org.thanlwinsoft.doccharconvert.feature.mien-ThanLwinSoft.org-win32.win32.x86.zip" dest="${buildDirectory}/DocCharConvert"/>		
				
		<!-- Create tar balls containing the executables -->
		<unzip src="${buildDirectory}/I.DocCharConvert/DocCharConvert-linux.gtk.x86.zip" dest="${buildDirectory}/DocCharConvert-linux.gtk.x86"/>
		<unzip src="${buildDirectory}/I.ThanLwinSoft.org/org.thanlwinsoft.doccharconvert.feature.myanmar-ThanLwinSoft.org-linux.gtk.x86.zip" dest="${buildDirectory}/DocCharConvert-linux.gtk.x86"/>
		<unzip src="${buildDirectory}/I.ThanLwinSoft.org/org.thanlwinsoft.doccharconvert.feature.mien-ThanLwinSoft.org-linux.gtk.x86.zip" dest="${buildDirectory}/DocCharConvert-linux.gtk.x86"/>
		<chmod file="${buildDirectory}/DocCharConvert-linux.gtk.x86/eclipse/launcher" perm="ugo+rx"/>
		<tar compression="bzip2" destfile="${buildDirectory}/I.DocCharConvert/DocCharConvert-linux.gtk.x86.tar.bz2" longfile="gnu">
			<tarfileset dir="${buildDirectory}/DocCharConvert-linux.gtk.x86">
				<include name="**/*"/>
				<exclude name="eclipse/launcher"/>
			</tarfileset>
			<tarfileset dir="${buildDirectory}/DocCharConvert-linux.gtk.x86" filemode="755">
				<include name="eclipse/launcher"/>
			</tarfileset>
		</tar>
		<!--<delete file="${buildDirectory}/I.${languagetest.productName}/${languagetest.productName}-linux.gtk.x86.zip"/>-->
		<delete file="${buildDirectory}/DocCharConvert-linux.gtk.x86"/>
		
		<unzip src="${buildDirectory}/I.DocCharConvert/DocCharConvert-linux.gtk.x86_64.zip" dest="${buildDirectory}/DocCharConvert-linux.gtk.x86_64"/>
		<unzip src="${buildDirectory}/I.ThanLwinSoft.org/org.thanlwinsoft.doccharconvert.feature.myanmar-ThanLwinSoft.org-linux.gtk.x86_64.zip" dest="${buildDirectory}/DocCharConvert-linux.gtk.x86_64"/>
		<unzip src="${buildDirectory}/I.ThanLwinSoft.org/org.thanlwinsoft.doccharconvert.feature.mien-ThanLwinSoft.org-linux.gtk.x86_64.zip" dest="${buildDirectory}/DocCharConvert-linux.gtk.x86_64"/>
		<chmod file="${buildDirectory}/DocCharConvert-linux.gtk.x86_64/eclipse/launcher" perm="ugo+rx"/>
		<tar compression="bzip2" destfile="${buildDirectory}/I.DocCharConvert/DocCharConvert-linux.gtk.x86_64.tar.bz2" longfile="gnu">
			<tarfileset dir="${buildDirectory}/DocCharConvert-linux.gtk.x86_64">
				<include name="**/*"/>
				<exclude name="eclipse/launcher"/>
			</tarfileset>
			<tarfileset dir="${buildDirectory}/DocCharConvert-linux.gtk.x86_64" filemode="755">
				<include name="eclipse/launcher"/>
			</tarfileset>
		</tar>
		<!--<delete file="${buildDirectory}/I.${languagetest.productName}/${languagetest.productName}-linux.gtk.x86.zip"/>-->
		<delete file="${buildDirectory}/DocCharConvert-linux.gtk.x86_64"/>

	</target>
	
	<target name="test-tar" description="Test out the build tar ball">
		<mkdir dir="${buildDirectory}/tmp"/>
		<!--
		<untar compression="bzip2" src="${buildDirectory}/I.DocCharConvert/DocCharConvert-${osgi.os}.${osgi.ws}.${osgi.arch}.tar.bz2" dest="${buildDirectory}/tmp"/>
		-->
		<exec executable="tar" dir="${buildDirectory}/tmp">
			<arg value="-jxf"/>
			<arg value="${buildDirectory}/I.DocCharConvert/DocCharConvert-${osgi.os}.${osgi.ws}.${osgi.arch}.tar.bz2"/>
		</exec>
		<exec executable="${buildDirectory}/tmp/eclipse/launcher"
			dir="${buildDirectory}/tmp/eclipse" />
	</target>
	
	<target name="nsis-init">
		<path id="nsis.path.rel">
		        <pathelement path="${basedir}/../nsis/DocCharConvert.nsi"/>
		</path>
		<condition property="nsisPathType" value="windows" else="unix">
			<os family="windows"/>
		</condition>
		<pathconvert refid="nsis.path.rel" targetos="${nsisPathType}" property="nsis.path"/> 
		
		<available filepath="${signtoolPath}" file="signtool.exe" property="nsis.sign"/>
	</target>
	
	<target name="nsis-sign" if="nsis.sign">
		<exec executable="${nsisHome}/makensis" dir="${buildDirectory}"
			logerror="true" output="${buildDirectory}/nsis_win32_x86.log">
			<env key="PATH" path="${signtoolPath}"/>
			<arg value="/DSIGN"/>
			<arg value="${nsis.path}"/>
		</exec>
		<!--<delete dir="${buildDirectory}/DocCharConvert"/>-->
		
		<exec executable="${signtoolPath}/signtool" dir="${buildDirectory}">
			<arg value="sign"/>
			<arg value="/f"/>
			<arg value="${certs}/code.thanlwinsoft.pfx"/>
			<arg value="/v"/>
			<arg value="/t"/>
			<arg value="http://timestamp.verisign.com/scripts/timestamp.dll"/>
			<arg value="/d"/>
			<arg value="DocCharConvert Installer"/>
            <arg value="${buildDirectory}/DocCharConvert-${doccharconvert.version}.exe"/>
		</exec>		
	</target>
	<target name="nsis-nosign" unless="nsis.sign">
		<exec executable="${nsisHome}/makensis" dir="${buildDirectory}"
				logerror="true" output="${buildDirectory}/nsis_win32_x86.log">
			<arg value="${nsis.path}"/>
		</exec>
	</target>
	<target name="nsis" description="Build NSIS Installer" depends="nsis-init,nsis-sign,nsis-nosign">

	</target>
	
	<target name="test-installer" description="Test the NSIS Installer">
		<exec executable="${buildDirectory}/DocCharConvert-${doccharconvert.version}.exe" vmlauncher="false">
		</exec>
	</target>
	
	<!--This target is responsible for cleaning up the build-directory-->
	<target name="clean">
		<delete dir="${release.path}/features"/>
		<delete dir="${release.path}/plugins"/>
		<delete dir="${buildDirectory}" />
	</target>

	<!--This target defines the run-order of the targets-->
	<target name="build" depends="dcc-schemas,pde-product,pde-build,add-executables,nsis" />
</project>
